# Generated by Django 5.2.2 on 2025-06-07 18:44

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("books", "0003_author_image_author_slug_book_slug_category_slug_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SystemStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="Date for which statistics are calculated",
                        unique=True,
                    ),
                ),
                (
                    "total_users",
                    models.PositiveIntegerField(
                        default=0, help_text="Total registered users"
                    ),
                ),
                (
                    "active_users",
                    models.PositiveIntegerField(
                        default=0, help_text="Users active today"
                    ),
                ),
                (
                    "new_users",
                    models.PositiveIntegerField(
                        default=0, help_text="New users registered today"
                    ),
                ),
                (
                    "total_books",
                    models.PositiveIntegerField(
                        default=0, help_text="Total books in catalog"
                    ),
                ),
                (
                    "available_books",
                    models.PositiveIntegerField(
                        default=0, help_text="Available books for borrowing"
                    ),
                ),
                (
                    "borrowed_books",
                    models.PositiveIntegerField(
                        default=0, help_text="Books currently borrowed"
                    ),
                ),
                (
                    "total_loans",
                    models.PositiveIntegerField(
                        default=0, help_text="Total loans created today"
                    ),
                ),
                (
                    "total_returns",
                    models.PositiveIntegerField(
                        default=0, help_text="Total books returned today"
                    ),
                ),
                (
                    "total_reservations",
                    models.PositiveIntegerField(
                        default=0, help_text="Total reservations created today"
                    ),
                ),
                (
                    "total_searches",
                    models.PositiveIntegerField(
                        default=0, help_text="Total searches performed today"
                    ),
                ),
                (
                    "unique_search_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Unique search terms used today"
                    ),
                ),
                (
                    "total_fines_collected",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total fines collected today",
                        max_digits=10,
                    ),
                ),
                (
                    "outstanding_fines",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Outstanding fines as of today",
                        max_digits=10,
                    ),
                ),
                (
                    "average_response_time",
                    models.FloatField(
                        default=0.0,
                        help_text="Average API response time in milliseconds",
                    ),
                ),
                (
                    "error_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="Error rate percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "system_statistics",
                "ordering": ["-date"],
                "indexes": [
                    models.Index(fields=["-date"], name="system_stat_date_6e1cb8_idx")
                ],
            },
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("book_search", "Book Search"),
                            ("book_view", "Book View"),
                            ("book_borrow", "Book Borrow"),
                            ("book_return", "Book Return"),
                            ("book_renew", "Book Renew"),
                            ("reservation_create", "Reservation Create"),
                            ("reservation_cancel", "Reservation Cancel"),
                            ("fine_payment", "Fine Payment"),
                            ("profile_update", "Profile Update"),
                        ],
                        help_text="Type of activity performed",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the activity"
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of object involved (book, user, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        blank=True, help_text="ID of the related object", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address of the user", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User agent string"),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional activity metadata",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the activity occurred",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed the activity (null for anonymous)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "activity_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="activity_lo_user_id_e40ffe_idx",
                    ),
                    models.Index(
                        fields=["activity_type", "timestamp"],
                        name="activity_lo_activit_296369_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="activity_lo_timesta_ef2c57_idx"
                    ),
                    models.Index(
                        fields=["object_type", "object_id"],
                        name="activity_lo_object__9db1e3_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BookPopularity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Total times book was viewed"
                    ),
                ),
                (
                    "daily_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Views in the last 24 hours"
                    ),
                ),
                (
                    "weekly_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Views in the last 7 days"
                    ),
                ),
                (
                    "monthly_views",
                    models.PositiveIntegerField(
                        default=0, help_text="Views in the last 30 days"
                    ),
                ),
                (
                    "total_borrows",
                    models.PositiveIntegerField(
                        default=0, help_text="Total times book was borrowed"
                    ),
                ),
                (
                    "monthly_borrows",
                    models.PositiveIntegerField(
                        default=0, help_text="Borrows in the last 30 days"
                    ),
                ),
                (
                    "yearly_borrows",
                    models.PositiveIntegerField(
                        default=0, help_text="Borrows in the last 365 days"
                    ),
                ),
                (
                    "search_appearances",
                    models.PositiveIntegerField(
                        default=0, help_text="Times book appeared in search results"
                    ),
                ),
                (
                    "search_clicks",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Times book was clicked from search results",
                    ),
                ),
                (
                    "average_rating",
                    models.FloatField(
                        default=0.0,
                        help_text="Average user rating",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "total_ratings",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of ratings"
                    ),
                ),
                (
                    "total_reservations",
                    models.PositiveIntegerField(
                        default=0, help_text="Total times book was reserved"
                    ),
                ),
                (
                    "current_reservations",
                    models.PositiveIntegerField(
                        default=0, help_text="Current active reservations"
                    ),
                ),
                (
                    "popularity_score",
                    models.FloatField(
                        default=0.0, help_text="Calculated popularity score"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="When metrics were last updated"
                    ),
                ),
                (
                    "last_viewed",
                    models.DateTimeField(
                        blank=True, help_text="When book was last viewed", null=True
                    ),
                ),
                (
                    "last_borrowed",
                    models.DateTimeField(
                        blank=True, help_text="When book was last borrowed", null=True
                    ),
                ),
                (
                    "book",
                    models.OneToOneField(
                        help_text="Book being tracked",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="popularity",
                        to="books.book",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Book Popularity",
                "db_table": "book_popularity",
                "indexes": [
                    models.Index(
                        fields=["-popularity_score"],
                        name="book_popula_popular_8d365c_idx",
                    ),
                    models.Index(
                        fields=["-total_views"], name="book_popula_total_v_bfbeb8_idx"
                    ),
                    models.Index(
                        fields=["-total_borrows"], name="book_popula_total_b_6b9e24_idx"
                    ),
                    models.Index(
                        fields=["-weekly_views"], name="book_popula_weekly__29887c_idx"
                    ),
                    models.Index(
                        fields=["-monthly_borrows"],
                        name="book_popula_monthly_d94e73_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CustomReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Report name", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Report description"),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily Report"),
                            ("weekly", "Weekly Report"),
                            ("monthly", "Monthly Report"),
                            ("yearly", "Yearly Report"),
                            ("custom", "Custom Report"),
                        ],
                        default="custom",
                        help_text="Type of report",
                        max_length=20,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Report parameters and filters"
                    ),
                ),
                (
                    "columns",
                    models.JSONField(
                        default=list, help_text="Columns to include in report"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, help_text="Report start date", null=True
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, help_text="Report end date", null=True
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Generated report data"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether report is visible to other users",
                    ),
                ),
                (
                    "is_scheduled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether report is automatically generated",
                    ),
                ),
                (
                    "schedule_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("daily", "Daily Report"),
                            ("weekly", "Weekly Report"),
                            ("monthly", "Monthly Report"),
                            ("yearly", "Yearly Report"),
                            ("custom", "Custom Report"),
                        ],
                        help_text="How often to generate report",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_generated",
                    models.DateTimeField(
                        blank=True,
                        help_text="When report was last generated",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created the report",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "custom_reports",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["created_by", "-created_at"],
                        name="custom_repo_created_d62f64_idx",
                    ),
                    models.Index(
                        fields=["report_type"], name="custom_repo_report__0b5700_idx"
                    ),
                    models.Index(
                        fields=["is_public"], name="custom_repo_is_publ_2b66e6_idx"
                    ),
                ],
            },
        ),
    ]
