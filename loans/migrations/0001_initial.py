# Generated by Django 5.2.2 on 2025-06-07 18:44

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("books", "0003_author_image_author_slug_book_slug_category_slug_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Loan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("returned", "Returned"),
                            ("overdue", "Overdue"),
                            ("renewed", "Renewed"),
                            ("lost", "Lost"),
                            ("damaged", "Damaged"),
                        ],
                        default="active",
                        help_text="Current status of the loan",
                        max_length=20,
                    ),
                ),
                (
                    "loan_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when book was borrowed",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(help_text="Date when book should be returned"),
                ),
                (
                    "return_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date when book was returned",
                        null=True,
                    ),
                ),
                (
                    "renewal_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this loan has been renewed",
                        validators=[django.core.validators.MaxValueValidator(5)],
                    ),
                ),
                (
                    "renewal_history",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="History of renewal dates and reasons",
                    ),
                ),
                (
                    "fine_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Fine amount for overdue/damage",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "fine_paid",
                    models.BooleanField(
                        default=False, help_text="Whether fine has been paid"
                    ),
                ),
                (
                    "fine_waived",
                    models.BooleanField(
                        default=False,
                        help_text="Whether fine has been waived by librarian",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this loan"
                    ),
                ),
                (
                    "librarian_notes",
                    models.TextField(
                        blank=True, help_text="Internal notes for librarians"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        help_text="Book that was borrowed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loans",
                        to="books.book",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Librarian who created this loan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="loans_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who borrowed the book",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "loans",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="loans_user_id_efac20_idx"
                    ),
                    models.Index(
                        fields=["book", "status"], name="loans_book_id_6360b6_idx"
                    ),
                    models.Index(fields=["due_date"], name="loans_due_dat_3e4b70_idx"),
                    models.Index(fields=["loan_date"], name="loans_loan_da_b73343_idx"),
                    models.Index(fields=["status"], name="loans_status_9049a0_idx"),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("fine_amount__gte", 0)),
                        name="positive_fine_amount",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("renewal_count__gte", 0)),
                        name="positive_renewal_count",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Reservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("fulfilled", "Fulfilled"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        help_text="Current status of the reservation",
                        max_length=20,
                    ),
                ),
                (
                    "reserved_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When reservation was made"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When reservation expires"),
                ),
                (
                    "notified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When user was notified about availability",
                        null=True,
                    ),
                ),
                (
                    "queue_position",
                    models.PositiveIntegerField(
                        default=1, help_text="Position in reservation queue"
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Reservation priority (higher number = higher priority)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this reservation"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        help_text="Book that was reserved",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="books.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the reservation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "reservations",
                "ordering": ["queue_position", "reserved_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "status"], name="reservation_user_id_d4fda7_idx"
                    ),
                    models.Index(
                        fields=["book", "status"], name="reservation_book_id_61e67a_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="reservation_expires_9dca17_idx"
                    ),
                    models.Index(
                        fields=["queue_position"], name="reservation_queue_p_00c70b_idx"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("status__in", ["pending", "confirmed"])),
                        fields=("user", "book"),
                        name="unique_active_reservation_per_user_book",
                    )
                ],
            },
        ),
    ]
